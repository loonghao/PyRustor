name: CI

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:
  workflow_call:

permissions:
  contents: read

jobs:
  # Version consistency check - must pass before any other checks
  version-check:
    name: Version Consistency
    runs-on: ubuntu-latest
    outputs:
      version-consistent: ${{ steps.check.outputs.consistent }}

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          python-version: "3.10"

      - name: Install just
        uses: extractions/setup-just@v3

      - name: Install dependencies
        run: uv sync --group dev

      - name: Check version consistency
        id: check
        run: |
          if just check-version; then
            echo "consistent=true" >> $GITHUB_OUTPUT
            echo "✅ All versions are synchronized"
          else
            echo "consistent=false" >> $GITHUB_OUTPUT
            echo "❌ Version consistency check failed"
            exit 1
          fi

  # Core testing across platforms and Python versions
  test:
    name: Test (${{ matrix.os }}, Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    needs: version-check
    strategy:
      fail-fast: false
      matrix:
        # Simplified matrix - focus on critical combinations
        include:
          # Ubuntu - test min, stable, and latest
          - os: ubuntu-latest
            python-version: "3.8"
          - os: ubuntu-latest
            python-version: "3.10"
          - os: ubuntu-latest
            python-version: "3.12"
          # macOS - test stable versions (avoid 3.9 gettext issues)
          - os: macos-latest
            python-version: "3.10"
          - os: macos-latest
            python-version: "3.11"
          # Windows - test stable version
          - os: windows-latest
            python-version: "3.10"

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Install just
        uses: extractions/setup-just@v3

      - name: Install dependencies
        run: uv sync --group dev

      - name: Build extension
        run: just ci-build
        env:
          RUST_BACKTRACE: 1

      - name: Generate type stubs
        run: just ci-stubs

      - name: Run tests
        run: just ci-test
        env:
          PYTHONUNBUFFERED: 1

      - name: Test basic functionality
        run: |
          uv run python -c "
          import sys
          sys.path.insert(0, 'python')
          import pyrustor
          print(f'✅ PyRustor {pyrustor.__version__} imported successfully')
          
          # Test basic functionality
          result = pyrustor.refactor_code('print(\"hello\")', [])
          print(f'✅ Basic refactor test passed: {len(result)} characters')
          "

  # Code quality checks
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: version-check

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          python-version: "3.10"

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install just
        uses: extractions/setup-just@v3

      - name: Install dependencies
        run: uv sync --group dev

      - name: Run linting and formatting checks
        run: just ci-lint

  # Wheel building test - ensures release compatibility
  wheel-test:
    name: Wheel Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: version-check
    if: github.ref == 'refs/heads/main' || contains(github.event.pull_request.labels.*.name, 'test-wheels') || github.event_name == 'workflow_dispatch'
    strategy:
      fail-fast: false
      matrix:
        # Test the same platforms as release
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          python-version: "3.10"

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build wheel
        uses: PyO3/maturin-action@v1
        with:
          args: --release --out dist --find-interpreter
          sccache: true

      - name: Test wheel installation and functionality
        run: |
          uv pip install pyrustor --find-links dist --force-reinstall --system
          python -c "
          import pyrustor
          print(f'✅ PyRustor {pyrustor.__version__} wheel installed successfully')
          
          # Test basic functionality
          result = pyrustor.refactor_code('print(\"test\")', [])
          print(f'✅ Wheel functionality test passed')
          "

      - name: Upload wheels (for debugging)
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: debug-wheels-${{ matrix.os }}
          path: dist

  # Overall CI status check
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [version-check, test, lint]
    if: always()

    steps:
      - name: Check all required jobs
        run: |
          if [[ "${{ needs.version-check.result }}" != "success" ]]; then
            echo "❌ Version check failed"
            exit 1
          fi
          if [[ "${{ needs.test.result }}" != "success" ]]; then
            echo "❌ Tests failed"
            exit 1
          fi
          if [[ "${{ needs.lint.result }}" != "success" ]]; then
            echo "❌ Linting failed"
            exit 1
          fi
          echo "✅ All CI checks passed"
