name: CI

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:
  workflow_call:

permissions:
  contents: read

jobs:
  # Code quality and testing
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install just
        uses: extractions/setup-just@v3

      - name: Install dependencies
        run: just ci-install

      - name: Build extension
        run: just ci-build
        env:
          RUST_BACKTRACE: 1

      - name: Generate type stubs
        run: just ci-stubs

      - name: Run Rust tests
        run: just ci-test-rust

      - name: Run Python tests
        run: just ci-test-python
        env:
          PYTHONUNBUFFERED: 1

      - name: Run basic functionality tests
        run: just ci-test-basic

  # Code formatting and linting
  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          python-version: "3.11"

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install just
        uses: extractions/setup-just@v3

      - name: Install dependencies
        run: just ci-install

      - name: Check version consistency
        run: just check-version

      - name: Run linting and formatting checks
        run: just ci-lint

  # Wheel building and installation tests for PR validation
  wheel-test:
    name: Wheel Test (${{ matrix.os }}, Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.11", "3.13"]
        include:
          # Test additional Python versions on Ubuntu only to save CI time
          - os: ubuntu-latest
            python-version: "3.9"
          - os: ubuntu-latest
            python-version: "3.10"
          - os: ubuntu-latest
            python-version: "3.12"

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install just
        uses: extractions/setup-just@v3

      - name: Install maturin
        run: |
          # Create a temporary virtual environment for maturin
          uv venv .maturin-env --python ${{ matrix.python-version }}
          uv pip install maturin --python .maturin-env

      - name: Build wheel
        run: uv run --python .maturin-env maturin build --release --out dist --find-interpreter
        env:
          RUST_BACKTRACE: 1

      - name: List built wheels
        run: |
          echo "Built wheels:"
          ls -la dist/
          echo "Wheel contents:"
          python -m zipfile -l dist/*.whl || true
        shell: bash

      - name: Test wheel installation in clean environment
        run: |
          # Create a clean virtual environment
          python -m venv test-env

          # Activate and install the wheel
          if [ "${{ runner.os }}" = "Windows" ]; then
            ./test-env/Scripts/activate
            pip install pyrustor --find-links dist --force-reinstall
          else
            source test-env/bin/activate
            pip install pyrustor --find-links dist --force-reinstall
          fi

          # Test basic functionality
          python -c "import pyrustor; print('[OK] PyRustor imported successfully')"
          python -c "import pyrustor; parser = pyrustor.Parser(); print('[OK] Parser created successfully')"
          python -c "import pyrustor; print('[OK] Available attributes:', [attr for attr in dir(pyrustor) if not attr.startswith('_')])"
        shell: bash
        env:
          PYTHONUNBUFFERED: 1

      - name: Test wheel with dependencies
        run: |
          # Install test dependencies and run integrity test
          if [ "${{ runner.os }}" = "Windows" ]; then
            ./test-env/Scripts/activate
            pip install pytest
            python scripts/test_wheel_integrity.py
          else
            source test-env/bin/activate
            pip install pytest
            python scripts/test_wheel_integrity.py
          fi
        shell: bash
        env:
          PYTHONUNBUFFERED: 1

  # Documentation tests
  docs:
    name: Documentation
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Run doc tests
        run: cargo test --doc

      - name: Check documentation
        run: cargo doc --no-deps --document-private-items

  # Benchmark tests
  benchmark:
    name: Benchmark Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          python-version: "3.11"

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies
        run: uv sync --group dev

      - name: Build extension (release mode)
        run: uv run maturin develop --release
        env:
          RUST_BACKTRACE: 1

      - name: Install just
        uses: extractions/setup-just@v3

      - name: Run benchmark tests
        run: just ci-test-python-benchmark
        env:
          PYTHONUNBUFFERED: 1

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: benchmark-results-${{ github.run_id }}
          path: |
            .pytest_cache/
            htmlcov/

  # Security and quality checks
  security:
    name: Security & Quality
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install just
        uses: extractions/setup-just@v3

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          python-version: "3.11"

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Install dependencies
        run: just ci-install

      - name: Run security audit (Rust)
        run: |
          cargo install cargo-audit
          cargo audit

      - name: Run security checks (Python)
        run: |
          uv add --group dev safety bandit
          uv run safety check --json --output safety-report.json || true
          uv run bandit -r python/ -f json -o bandit-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports-${{ github.run_id }}
          path: |
            safety-report.json
            bandit-report.json

  # Cross-platform compatibility test (reduced matrix)
  compatibility:
    name: Cross-Platform (${{ matrix.os }}, Python ${{ matrix.python-version }})
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12']
        exclude:
          # Reduce matrix size for faster CI
          - os: macos-latest
            python-version: '3.10'
          - os: windows-latest
            python-version: '3.10'

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Install just
        uses: extractions/setup-just@v3

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies
        run: just ci-install

      - name: Build extension
        run: just ci-build
        env:
          RUST_BACKTRACE: 1

      - name: Run basic tests
        run: just ci-test-basic
        env:
          PYTHONUNBUFFERED: 1

      - name: Run core functionality tests
        run: uv run python -m pytest tests/test_basic.py tests/test_parser.py tests/test_refactor.py -v --tb=short
        env:
          PYTHONUNBUFFERED: 1
